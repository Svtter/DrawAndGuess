{
  "name": "socket.io",
  "version": "1.3.6",
  "description": "node.js realtime framework server",
  "keywords": [
    "realtime",
    "framework",
    "websocket",
    "tcp",
    "events",
    "socket",
    "io"
  ],
  "main": "./lib/index",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/Automattic/socket.io.git"
  },
  "scripts": {
    "test": "mocha --reporter dot --slow 200ms --bail"
  },
  "dependencies": {
    "engine.io": "github:automattic/engine.io#f3fd4bb",
    "socket.io-parser": "2.2.4",
    "socket.io-client": "github:automattic/socket.io-client#bf98153",
    "socket.io-adapter": "github:automattic/socket.io-adapter#de5cba",
    "has-binary": "0.1.6",
    "debug": "2.1.3"
  },
  "devDependencies": {
    "mocha": "1.16.2",
    "expect.js": "0.3.1",
    "supertest": "0.8.2",
    "superagent": "0.17.0",
    "istanbul": "0.2.3"
  },
  "contributors": [
    {
      "name": "Guillermo Rauch",
      "email": "rauchg@gmail.com"
    },
    {
      "name": "Arnout Kazemier",
      "email": "info@3rd-eden.com"
    },
    {
      "name": "Vladimir Dronnikov",
      "email": "dronnikov@gmail.com"
    },
    {
      "name": "Einar Otto Stangvik",
      "email": "einaros@gmail.com"
    }
  ],
  "readme": "\r\n# socket.io\r\n\r\n[![Build Status](https://secure.travis-ci.org/Automattic/socket.io.svg)](http://travis-ci.org/Automattic/socket.io)\r\n![NPM version](https://badge.fury.io/js/socket.io.svg)\r\n![Downloads](http://img.shields.io/npm/dm/socket.io.svg?style=flat)\r\n[![](http://slack.socket.io/badge.svg)](http://slack.socket.io)\r\n\r\n## How to use\r\n\r\nThe following example attaches socket.io to a plain Node.JS\r\nHTTP server listening on port `3000`.\r\n\r\n```js\r\nvar server = require('http').createServer();\r\nvar io = require('socket.io')(server);\r\nio.on('connection', function(socket){\r\n  socket.on('event', function(data){});\r\n  socket.on('disconnect', function(){});\r\n});\r\nserver.listen(3000);\r\n```\r\n\r\n### Standalone\r\n\r\n```js\r\nvar io = require('socket.io')();\r\nio.on('connection', function(socket){});\r\nio.listen(3000);\r\n```\r\n\r\n### In conjunction with Express\r\n\r\nStarting with **3.0**, express applications have become request handler\r\nfunctions that you pass to `http` or `http` `Server` instances. You need\r\nto pass the `Server` to `socket.io`, and not the express application\r\nfunction.\r\n\r\n```js\r\nvar app = require('express')();\r\nvar server = require('http').createServer(app);\r\nvar io = require('socket.io')(server);\r\nio.on('connection', function(){ /* … */ });\r\nserver.listen(3000);\r\n```\r\n\r\n### In conjunction with Koa\r\n\r\nLike Express.JS, Koa works by exposing an application as a request\r\nhandler function, but only by calling the `callback` method.\r\n\r\n```js\r\nvar app = require('koa')();\r\nvar server = require('http').createServer(app.callback());\r\nvar io = require('socket.io')(server);\r\nio.on('connection', function(){ /* … */ });\r\nserver.listen(3000);\r\n```\r\n\r\n## API\r\n\r\n### Server\r\n\r\n  Exposed by `require('socket.io')`.\r\n\r\n### Server()\r\n\r\n  Creates a new `Server`. Works with and without `new`:\r\n\r\n  ```js\r\n  var io = require('socket.io')();\r\n  // or\r\n  var Server = require('socket.io');\r\n  var io = new Server();\r\n  ```\r\n\r\n### Server(opts:Object)\r\n\r\n  Optionally, the first or second argument (see below) of the `Server`\r\n  constructor can be an options object.\r\n\r\n  The following options are supported:\r\n\r\n  - `serveClient` sets the value for Server#serveClient()\r\n  - `path` sets the value for Server#path()\r\n\r\n  The same options passed to socket.io are always passed to\r\n  the `engine.io` `Server` that gets created. See engine.io\r\n  [options](https://github.com/learnboost/engine.io#methods-1)\r\n  as reference.\r\n\r\n### Server(srv:http#Server, opts:Object)\r\n\r\n  Creates a new `Server` and attaches it to the given `srv`. Optionally\r\n  `opts` can be passed.\r\n\r\n### Server(port:Number, opts:Object)\r\n\r\n  Binds socket.io to a new `http.Server` that listens on `port`.\r\n\r\n### Server#serveClient(v:Boolean):Server\r\n\r\n  If `v` is `true` the attached server (see `Server#attach`) will serve\r\n  the client files. Defaults to `true`.\r\n\r\n  This method has no effect after `attach` is called.\r\n\r\n  ```js\r\n  // pass a server and the `serveClient` option\r\n  var io = require('socket.io')(http, { serveClient: false });\r\n\r\n  // or pass no server and then you can call the method\r\n  var io = require('socket.io')();\r\n  io.serveClient(false);\r\n  io.attach(http);\r\n  ```\r\n\r\n  If no arguments are supplied this method returns the current value.\r\n\r\n### Server#path(v:String):Server\r\n\r\n  Sets the path `v` under which `engine.io` and the static files will be\r\n  served. Defaults to `/socket.io`.\r\n\r\n  If no arguments are supplied this method returns the current value.\r\n\r\n### Server#adapter(v:Adapter):Server\r\n\r\n  Sets the adapter `v`. Defaults to an instance of the `Adapter` that\r\n  ships with socket.io which is memory based. See\r\n  [socket.io-adapter](https://github.com/Automattic/socket.io-adapter).\r\n\r\n  If no arguments are supplied this method returns the current value.\r\n\r\n### Server#origins(v:String):Server\r\n\r\n  Sets the allowed origins `v`. Defaults to any origins being allowed.\r\n\r\n  If no arguments are supplied this method returns the current value.\r\n\r\n### Server#origins(v:Function):Server\r\n\r\n  Sets the allowed origins as dynamic function. Function takes two arguments `origin:String` and `callback(error, success)`, where `success` is a boolean value indicating whether origin is allowed or not.\r\n\r\n  __Potential drawbacks__:\r\n  * in some situations, when it is not possible to determine `origin` it may have value of `*`\r\n  * As this function will be executed for every request, it is advised to make this function work as fast as possible\r\n  * If `socket.io` is used together with `Express`, the CORS headers will be affected only for `socket.io` requests. For Express can use [cors](https://github.com/troygoode/node-cors/)\r\n\r\n\r\n### Server#sockets:Namespace\r\n\r\n  The default (`/`) namespace.\r\n\r\n### Server#attach(srv:http#Server, opts:Object):Server\r\n\r\n  Attaches the `Server` to an engine.io instance on `srv` with the\r\n  supplied `opts` (optionally).\r\n\r\n### Server#attach(port:Number, opts:Object):Server\r\n\r\n  Attaches the `Server` to an engine.io instance that is bound to `port`\r\n  with the given `opts` (optionally).\r\n\r\n### Server#listen\r\n\r\n  Synonym of `Server#attach`.\r\n\r\n### Server#bind(srv:engine#Server):Server\r\n\r\n  Advanced use only. Binds the server to a specific engine.io `Server`\r\n  (or compatible API) instance.\r\n\r\n### Server#onconnection(socket:engine#Socket):Server\r\n\r\n  Advanced use only. Creates a new `socket.io` client from the incoming\r\n  engine.io (or compatible API) `socket`.\r\n\r\n### Server#of(nsp:String):Namespace\r\n\r\n  Initializes and retrieves the given `Namespace` by its pathname\r\n  identifier `nsp`.\r\n\r\n  If the namespace was already initialized it returns it right away.\r\n\r\n### Server#emit\r\n\r\n  Emits an event to all connected clients. The following two are\r\n  equivalent:\r\n\r\n  ```js\r\n  var io = require('socket.io')();\r\n  io.sockets.emit('an event sent to all connected clients');\r\n  io.emit('an event sent to all connected clients');\r\n  ```\r\n\r\n  For other available methods, see `Namespace` below.\r\n\r\n### Server#close\r\n\r\n  Closes socket server\r\n\r\n  ```js\r\n  var Server = require('socket.io');\r\n  var PORT   = 3030;\r\n  var server = require('http').Server();\r\n\r\n  var io = Server(PORT);\r\n\r\n  io.close(); // Close current server\r\n\r\n  server.listen(PORT); // PORT is free to use\r\n\r\n  io = Server(server);\r\n  ```\r\n\r\n### Server#use\r\n\r\n  See `Namespace#use` below.\r\n\r\n### Namespace\r\n\r\n  Represents a pool of sockets connected under a given scope identified\r\n  by a pathname (eg: `/chat`).\r\n\r\n  By default the client always connects to `/`.\r\n\r\n#### Events\r\n\r\n  - `connection` / `connect`. Fired upon a connection.\r\n\r\n    Parameters:\r\n    - `Socket` the incoming socket.\r\n\r\n### Namespace#name:String\r\n\r\n  The namespace identifier property.\r\n\r\n### Namespace#connected:Object<Socket>\r\n\r\n  Hash of `Socket` objects that are connected to this namespace indexed\r\n  by `id`.\r\n\r\n### Namespace#clients(fn:Function)\r\n\r\n  Gets a list of client IDs connected to this namespace (across all nodes if applicable).\r\n\r\n  An example to get all clients in a namespace:\r\n\r\n  ```js\r\n  var io = require('socket.io')();\r\n  io.of('/chat').clients(function(error, clients){\r\n    if (error) throw error;\r\n    console.log(clients); // => [PZDoMHjiu8PYfRiKAAAF, Anw2LatarvGVVXEIAAAD]\r\n  });\r\n  ```\r\n\r\n  An example to get all clients in namespace's room:\r\n\r\n  ```js\r\n  var io = require('socket.io')();\r\n  io.of('/chat').in('general').clients(function(error, clients){\r\n    if (error) throw error;\r\n    console.log(clients); // => [Anw2LatarvGVVXEIAAAD]\r\n  });\r\n  ```\r\n\r\n  As with broadcasting, the default is all clients from the default namespace ('/'):\r\n\r\n  ```js\r\n  var io = require('socket.io')();\r\n  io.clients(function(error, clients){\r\n    if (error) throw error;\r\n    console.log(clients); // => [6em3d4TJP8Et9EMNAAAA, G5p55dHhGgUnLUctAAAB]\r\n  });\r\n  ```\r\n\r\n### Namespace#use(fn:Function):Namespace\r\n\r\n  Registers a middleware, which is a function that gets executed for\r\n  every incoming `Socket` and receives as parameter the socket and a\r\n  function to optionally defer execution to the next registered\r\n  middleware.\r\n\r\n  ```js\r\n  var io = require('socket.io')();\r\n  io.use(function(socket, next){\r\n    if (socket.request.headers.cookie) return next();\r\n    next(new Error('Authentication error'));\r\n  });\r\n  ```\r\n\r\n  Errors passed to middleware callbacks are sent as special `error`\r\n  packets to clients.\r\n\r\n### Socket\r\n\r\n  A `Socket` is the fundamental class for interacting with browser\r\n  clients. A `Socket` belongs to a certain `Namespace` (by default `/`)\r\n  and uses an underlying `Client` to communicate.\r\n\r\n### Socket#rooms:Array\r\n\r\n  A list of strings identifying the rooms this socket is in.\r\n\r\n### Socket#client:Client\r\n\r\n  A reference to the underlying `Client` object.\r\n\r\n### Socket#conn:Socket\r\n\r\n  A reference to the underlying `Client` transport connection (engine.io\r\n  `Socket` object).\r\n\r\n### Socket#request:Request\r\n\r\n  A getter proxy that returns the reference to the `request` that\r\n  originated the underlying engine.io `Client`. Useful for accessing\r\n  request headers such as `Cookie` or `User-Agent`.\r\n\r\n### Socket#id:String\r\n\r\n  A unique identifier for the socket session, that comes from the\r\n  underlying `Client`.\r\n\r\n### Socket#emit(name:String[, …]):Socket\r\n\r\n  Emits an event to the socket identified by the string `name`. Any\r\n  other parameters can be included.\r\n\r\n  All datastructures are supported, including `Buffer`. JavaScript\r\n  functions can't be serialized/deserialized.\r\n\r\n  ```js\r\n  var io = require('socket.io')();\r\n  io.on('connection', function(socket){\r\n    socket.emit('an event', { some: 'data' });\r\n  });\r\n  ```\r\n\r\n### Socket#join(name:String[, fn:Function]):Socket\r\n\r\n  Adds the socket to the `room`, and fires optionally a callback `fn`\r\n  with `err` signature (if any).\r\n\r\n  The socket is automatically a member of a room identified with its\r\n  session id (see `Socket#id`).\r\n\r\n  The mechanics of joining  rooms are handled by the `Adapter`\r\n  that has been configured (see `Server#adapter` above), defaulting to\r\n  [socket.io-adapter](https://github.com/Automattic/socket.io-adapter).\r\n\r\n### Socket#leave(name:String[, fn:Function]):Socket\r\n\r\n  Removes the socket from `room`, and fires optionally a callback `fn`\r\n  with `err` signature (if any).\r\n\r\n  **Rooms are left automatically upon disconnection**.\r\n\r\n  The mechanics of leaving rooms are handled by the `Adapter`\r\n  that has been configured (see `Server#adapter` above), defaulting to\r\n  [socket.io-adapter](https://github.com/Automattic/socket.io-adapter).\r\n\r\n### Socket#to(room:String):Socket\r\n### Socket#in(room:String):Socket\r\n\r\n  Sets a modifier for a subsequent event emission that the event will\r\n  only be _broadcasted_ to sockets that have joined the given `room`.\r\n\r\n  To emit to multiple rooms, you can call `to` several times.\r\n\r\n  ```js\r\n  var io = require('socket.io')();\r\n  io.on('connection', function(socket){\r\n    socket.to('others').emit('an event', { some: 'data' });\r\n  });\r\n  ```\r\n\r\n### Socket#compress(v:Boolean):Socket\r\n\r\n  Sets a modifier for a subsequent event emission that the event data will\r\n  only be _compressed_ if the value is `true`. Defaults to `true` when you don't call the method.\r\n\r\n  ```js\r\n  var io = require('socket.io')();\r\n  io.on('connection', function(socket){\r\n    socket.compress(false).emit('an event', { some: 'data' });\r\n  });\r\n  ```\r\n\r\n### Client\r\n\r\n  The `Client` class represents an incoming transport (engine.io)\r\n  connection. A `Client` can be associated with many multiplexed `Socket`\r\n  that belong to different `Namespace`s.\r\n\r\n### Client#conn\r\n\r\n  A reference to the underlying `engine.io` `Socket` connection.\r\n\r\n### Client#request\r\n\r\n  A getter proxy that returns the reference to the `request` that\r\n  originated the engine.io connection. Useful for accessing\r\n  request headers such as `Cookie` or `User-Agent`.\r\n\r\n## Debug / logging\r\n\r\nSocket.IO is powered by [debug](http://github.com/visionmedia/debug).\r\nIn order to see all the debug output, run your app with the environment variable\r\n`DEBUG` including the desired scope.\r\n\r\nTo see the output from all of Socket.IO's debugging scopes you can use:\r\n\r\n```\r\nDEBUG=socket.io* node myapp\r\n```\r\n\r\n## License\r\n\r\nMIT\r\n",
  "readmeFilename": "Readme.md",
  "gitHead": "ae5420b7275c61c87805e8e0ffa3698469fd5be5",
  "bugs": {
    "url": "https://github.com/Automattic/socket.io/issues"
  },
  "homepage": "https://github.com/Automattic/socket.io#readme",
  "_id": "socket.io@1.3.6",
  "_shasum": "cca86906a9f7ce715d3fc8e06ec86d3f74df4167",
  "_from": "socket.io",
  "_resolved": "file:socket.io"
}
