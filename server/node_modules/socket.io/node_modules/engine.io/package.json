{
  "name": "engine.io",
  "version": "1.5.2",
  "description": "The realtime engine behind Socket.IO. Provides the foundation of a bidirectional connection between client and server",
  "main": "./lib/engine.io",
  "author": {
    "name": "Guillermo Rauch",
    "email": "guillermo@learnboost.com"
  },
  "homepage": "https://github.com/LearnBoost/engine.io",
  "contributors": [
    {
      "name": "Eugen Dueck",
      "url": "https://github.com/EugenDueck"
    },
    {
      "name": "Afshin Mehrabani",
      "url": "https://github.com/afshinm"
    },
    {
      "name": "Christoph Dorn",
      "url": "https://github.com/cadorn"
    },
    {
      "name": "Mark Mokryn",
      "email": "mokesmokes@gmail.com"
    }
  ],
  "license": "MIT",
  "dependencies": {
    "debug": "2.1.3",
    "ws": "0.7.2",
    "engine.io-parser": "1.2.1",
    "base64id": "0.1.0",
    "accepts": "1.1.4"
  },
  "devDependencies": {
    "mocha": "1.12.0",
    "expect.js": "0.2.0",
    "superagent": "0.15.4",
    "engine.io-client": "github:socketio/engine.io-client#d010541",
    "s": "0.1.1"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/Automattic/engine.io.git"
  },
  "gitHead": "f3fd4bb7eb25f3061b1b61b5453d56c83e71feb0",
  "readme": "\r\n# Engine.IO: the realtime engine\r\n\r\n[![Build Status](https://secure.travis-ci.org/socketio/engine.io.png)](http://travis-ci.org/socketio/engine.io)\r\n[![NPM version](https://badge.fury.io/js/engine.io.png)](http://badge.fury.io/js/engine.io)\r\n\r\n`Engine.IO` is the implementation of transport-based\r\ncross-browser/cross-device bi-directional communication layer for\r\n[Socket.IO](http://github.com/learnboost/socket.io).\r\n\r\n## How to use\r\n\r\n### Server\r\n\r\n#### (A) Listening on a port\r\n\r\n```js\r\nvar engine = require('engine.io');\r\nvar server = engine.listen(80);\r\n\r\nserver.on('connection', function(socket){\r\n  socket.send('utf 8 string');\r\n  socket.send(new Buffer([0, 1, 2, 3, 4, 5])); // binary data\r\n});\r\n```\r\n\r\n#### (B) Intercepting requests for a http.Server\r\n\r\n```js\r\nvar engine = require('engine.io');\r\nvar http = require('http').createServer().listen(3000);\r\nvar server = engine.attach(http);\r\n\r\nserver.on('connection', function (socket) {\r\n  socket.on('message', function(data){ });\r\n  socket.on('close', function(){ });\r\n});\r\n```\r\n\r\n#### (C) Passing in requests\r\n\r\n```js\r\nvar engine = require('engine.io');\r\nvar server = new engine.Server();\r\n\r\nserver.on('connection', function(socket){\r\n  socket.send('hi');\r\n});\r\n\r\n// â€¦\r\nhttpServer.on('upgrade', function(req, socket, head){\r\n  server.handleUpgrade(req, socket, head);\r\n});\r\nhttpServer.on('request', function(req, res){\r\n  server.handleRequest(req, res);\r\n});\r\n```\r\n\r\n### Client\r\n\r\n```html\r\n<script src=\"/path/to/engine.io.js\"></script>\r\n<script>\r\n  var socket = new eio.Socket('ws://localhost/');\r\n  socket.on('open', function(){\r\n    socket.on('message', function(data){});\r\n    socket.on('close', function(){});\r\n  });\r\n</script>\r\n```\r\n\r\nFor more information on the client refer to the\r\n[engine-client](http://github.com/learnboost/engine.io-client) repository.\r\n\r\n## What features does it have?\r\n\r\n- **Maximum reliability**. Connections are established even in the presence of:\r\n  - proxies and load balancers.\r\n  - personal firewall and antivirus software.\r\n  - for more information refer to **Goals** and **Architecture** sections\r\n- **Minimal client size** aided by:\r\n  - lazy loading of flash transports.\r\n  - lack of redundant transports.\r\n- **Scalable**\r\n  - load balancer friendly\r\n- **Future proof**\r\n- **100% Node.JS core style**\r\n  - No API sugar (left for higher level projects)\r\n  - Written in readable vanilla JavaScript\r\n\r\n## API\r\n\r\n### Server\r\n\r\n<hr><br>\r\n\r\n#### Top-level\r\n\r\nThese are exposed by `require('engine.io')`:\r\n\r\n##### Events\r\n\r\n- `flush`\r\n    - Called when a socket buffer is being flushed.\r\n    - **Arguments**\r\n      - `Socket`: socket being flushed\r\n      - `Array`: write buffer\r\n- `drain`\r\n    - Called when a socket buffer is drained\r\n    - **Arguments**\r\n      - `Socket`: socket being flushed\r\n\r\n##### Properties\r\n\r\n- `protocol` _(Number)_: protocol revision number\r\n- `Server`: Server class constructor\r\n- `Socket`: Socket class constructor\r\n- `Transport` _(Function)_: transport constructor\r\n- `transports` _(Object)_: map of available transports\r\n\r\n##### Methods\r\n\r\n- `()`\r\n    - Returns a new `Server` instance. If the first argument is an `http.Server` then the\r\n      new `Server` instance will be attached to it. Otherwise, the arguments are passed\r\n      directly to the `Server` constructor.\r\n    - **Parameters**\r\n      - `http.Server`: optional, server to attach to.\r\n      - `Object`: optional, options object (see `Server#constructor` api docs below)\r\n\r\n  The following are identical ways to instantiate a server and then attach it.\r\n  ```js\r\n  var httpServer; // previously created with `http.createServer();` from node.js api.\r\n\r\n  // create a server first, and then attach\r\n  var eioServer = require('engine.io').Server();\r\n  eioServer.attach(httpServer);\r\n\r\n  // or call the module as a function to get `Server`\r\n  var eioServer = require('engine.io')();\r\n  eioServer.attach(httpServer);\r\n\r\n  // immediately attach\r\n  var eioServer = require('engine.io')(httpServer);\r\n  ```\r\n\r\n- `listen`\r\n    - Creates an `http.Server` which listens on the given port and attaches WS\r\n      to it. It returns `501 Not Implemented` for regular http requests.\r\n    - **Parameters**\r\n      - `Number`: port to listen on.\r\n      - `Object`: optional, options object\r\n      - `Function`: callback for `listen`.\r\n    - **Options**\r\n      - All options from `Server.attach` method, documented below.\r\n      - **Additionally** See Server `constructor` below for options you can pass for creating the new Server\r\n    - **Returns** `Server`\r\n- `attach`\r\n    - Captures `upgrade` requests for a `http.Server`. In other words, makes\r\n      a regular http.Server WebSocket-compatible.\r\n    - **Parameters**\r\n      - `http.Server`: server to attach to.\r\n      - `Object`: optional, options object\r\n    - **Options**\r\n      - All options from `Server.attach` method, documented below.\r\n      - **Additionally** See Server `constructor` below for options you can pass for creating the new Server\r\n    - **Returns** `Server` a new Server instance.\r\n\r\n<hr><br>\r\n\r\n#### Server\r\n\r\nThe main server/manager. _Inherits from EventEmitter_.\r\n\r\n##### Events\r\n\r\n- `connection`\r\n    - Fired when a new connection is established.\r\n    - **Arguments**\r\n      - `Socket`: a Socket object\r\n\r\n##### Properties\r\n\r\n**Important**: if you plan to use Engine.IO in a scalable way, please\r\nkeep in mind the properties below will only reflect the clients connected\r\nto a single process.\r\n\r\n- `clients` _(Object)_: hash of connected clients by id.\r\n- `clientsCount` _(Number)_: number of connected clients.\r\n\r\n##### Methods\r\n\r\n- **constructor**\r\n    - Initializes the server\r\n    - **Parameters**\r\n      - `Object`: optional, options object\r\n    - **Options**\r\n      - `pingTimeout` (`Number`): how many ms without a pong packet to\r\n        consider the connection closed (`60000`)\r\n      - `pingInterval` (`Number`): how many ms before sending a new ping\r\n        packet (`25000`)\r\n      - `maxHttpBufferSize` (`Number`): how many bytes or characters a message\r\n        can be when polling, before closing the session (to avoid DoS). Default\r\n        value is `10E7`.\r\n      - `allowRequest` (`Function`): A function that receives a given handshake\r\n        or upgrade request as its first parameter, and can decide whether to\r\n        continue or not. The second argument is a function that needs to be\r\n        called with the decided information: `fn(err, success)`, where\r\n        `success` is a boolean value where false means that the request is\r\n        rejected, and err is an error code.\r\n      - `transports` (`<Array> String`): transports to allow connections\r\n        to (`['polling', 'websocket']`)\r\n      - `allowUpgrades` (`Boolean`): whether to allow transport upgrades\r\n        (`true`)\r\n      - `perMessageDeflate` (`Object|Boolean`): parameters of the WebSocket permessage-deflate extension\r\n        (see [ws module](https://github.com/einaros/ws) api docs). Set to `false` to disable. (`true`)\r\n      - `httpCompression` (`Object|Boolean`): parameters of the http compression for the polling transports\r\n        (see [zlib](http://nodejs.org/api/zlib.html#zlib_options) api docs). Set to `false` to disable. (`true`)\r\n        - `threshold` (`Number`): data is compressed only if the byte size is above this value (`1024`)\r\n      - `cookie` (`String|Boolean`): name of the HTTP cookie that\r\n        contains the client sid to send as part of handshake response\r\n        headers. Set to `false` to not send one. (`io`)\r\n- `close`\r\n    - Closes all clients\r\n    - **Returns** `Server` for chaining\r\n- `handleRequest`\r\n    - Called internally when a `Engine` request is intercepted.\r\n    - **Parameters**\r\n      - `http.ServerRequest`: a node request object\r\n      - `http.ServerResponse`: a node response object\r\n    - **Returns** `Server` for chaining\r\n- `handleUpgrade`\r\n    - Called internally when a `Engine` ws upgrade is intercepted.\r\n    - **Parameters** (same as `upgrade` event)\r\n      - `http.ServerRequest`: a node request object\r\n      - `net.Stream`: TCP socket for the request\r\n      - `Buffer`: legacy tail bytes\r\n    - **Returns** `Server` for chaining\r\n- `attach`\r\n    - Attach this Server instance to an `http.Server`\r\n    - Captures `upgrade` requests for a `http.Server`. In other words, makes\r\n      a regular http.Server WebSocket-compatible.\r\n    - **Parameters**\r\n      - `http.Server`: server to attach to.\r\n      - `Object`: optional, options object\r\n    - **Options**\r\n      - `path` (`String`): name of the path to capture (`/engine.io`).\r\n      - `destroyUpgrade` (`Boolean`): destroy unhandled upgrade requests (`true`)\r\n      - `destroyUpgradeTimeout` (`Number`): milliseconds after which unhandled requests are ended (`1000`)\r\n- `generateId`\r\n    - Generate a socket id.\r\n    - Overwrite this method to generate your custom socket id.\r\n    - **Parameters**\r\n      - `http.ServerRequest`: a node request object\r\n  - **Returns** A socket id for connected client.\r\n\r\n<hr><br>\r\n\r\n#### Socket\r\n\r\nA representation of a client. _Inherits from EventEmitter_.\r\n\r\n##### Events\r\n\r\n- `close`\r\n    - Fired when the client is disconnected.\r\n    - **Arguments**\r\n      - `String`: reason for closing\r\n      - `Object`: description object (optional)\r\n- `message`\r\n    - Fired when the client sends a message.\r\n    - **Arguments**\r\n      - `String` or `Buffer`: Unicode string or Buffer with binary contents\r\n- `error`\r\n    - Fired when an error occurs.\r\n    - **Arguments**\r\n      - `Error`: error object\r\n- `flush`\r\n    - Called when the write buffer is being flushed.\r\n    - **Arguments**\r\n      - `Array`: write buffer\r\n- `drain`\r\n    - Called when the write buffer is drained\r\n- `packet`\r\n    - Called when a socket received a packet (`message`, `ping`)\r\n    - **Arguments**\r\n      - `type`: packet type\r\n      - `data`: packet data (if type is message)\r\n- `packetCreate`\r\n    - Called before a socket sends a packet (`message`, `pong`)\r\n    - **Arguments**\r\n      - `type`: packet type\r\n      - `data`: packet data (if type is message)\r\n\r\n##### Properties\r\n\r\n- `id` _(String)_: unique identifier\r\n- `server` _(Server)_: engine parent reference\r\n- `request` _(http.ServerRequest)_: request that originated the Socket\r\n- `upgraded` _(Boolean)_: whether the transport has been upgraded\r\n- `readyState` _(String)_: opening|open|closing|closed\r\n- `transport` _(Transport)_: transport reference\r\n\r\n##### Methods\r\n\r\n- `send`:\r\n    - Sends a message, performing `message = toString(arguments[0])` unless\r\n      sending binary data, which is sent as is.\r\n    - **Parameters**\r\n      - `String` |Â `Buffer` | `ArrayBuffer` | `ArrayBufferView`: a string or any object implementing `toString()`, with outgoing data, or a Buffer or ArrayBuffer with binary data. Also any ArrayBufferView can be sent as is.\r\n      - `Object`: optional, options object\r\n      - `Function`: optional, a callback executed when the message gets flushed out by the transport\r\n    - **Options**\r\n      - `compress` (`Boolean`): whether to compress sending data. This option might be ignored and forced to be `true` when using polling. (`true`)\r\n    - **Returns** `Socket` for chaining\r\n- `close`\r\n    - Disconnects the client\r\n    - **Returns** `Socket` for chaining\r\n\r\n### Client\r\n\r\n<hr><br>\r\n\r\nExposed in the `eio` global namespace (in the browser), or by\r\n`require('engine.io-client')` (in Node.JS).\r\n\r\nFor the client API refer to the \r\n[engine-client](http://github.com/learnboost/engine.io-client) repository.\r\n\r\n## Debug / logging\r\n\r\nEngine.IO is powered by [debug](http://github.com/visionmedia/debug).\r\nIn order to see all the debug output, run your app with the environment variable\r\n`DEBUG` including the desired scope.\r\n\r\nTo see the output from all of Engine.IO's debugging scopes you can use:\r\n\r\n```\r\nDEBUG=engine* node myapp\r\n```\r\n\r\n## Transports\r\n\r\n- `polling`: XHR / JSONP polling transport.\r\n- `websocket`: WebSocket transport.\r\n\r\n## Plugins\r\n\r\n- [engine.io-conflation](https://github.com/EugenDueck/engine.io-conflation): Makes **conflation and aggregation** of messages straightforward.\r\n\r\n## Support\r\n\r\nThe support channels for `engine.io` are the same as `socket.io`:\r\n  - irc.freenode.net **#socket.io**\r\n  - [Google Groups](http://groups.google.com/group/socket_io)\r\n  - [Website](http://socket.io)\r\n\r\n## Development\r\n\r\nTo contribute patches, run tests or benchmarks, make sure to clone the\r\nrepository:\r\n\r\n```\r\ngit clone git://github.com/LearnBoost/engine.io.git\r\n```\r\n\r\nThen:\r\n\r\n```\r\ncd engine.io\r\nnpm install\r\n```\r\n\r\n## Tests\r\n\r\nTests run with `make test`. It runs the server tests that are aided by\r\nthe usage of `engine.io-client`.\r\n\r\nMake sure `npm install` is run first.\r\n\r\n## Goals\r\n\r\nThe main goal of `Engine` is ensuring the most reliable realtime communication.\r\nUnlike the previous Socket.IO core, it always establishes a long-polling\r\nconnection first, then tries to upgrade to better transports that are \"tested\" on\r\nthe side.\r\n\r\nDuring the lifetime of the Socket.IO projects, we've found countless drawbacks\r\nto relying on `HTML5 WebSocket` or `Flash Socket` as the first connection\r\nmechanisms.\r\n\r\nBoth are clearly the _right way_ of establishing a bidirectional communication,\r\nwith HTML5 WebSocket being the way of the future. However, to answer most business\r\nneeds, alternative traditional HTTP 1.1 mechanisms are just as good as delivering\r\nthe same solution.\r\n\r\nWebSocket based connections have two fundamental benefits:\r\n\r\n1. **Better server performance**\r\n  - _A: Load balancers_<br>\r\n      Load balancing a long polling connection poses a serious architectural nightmare\r\n      since requests can come from any number of open sockets by the user agent, but\r\n      they all need to be routed to the process and computer that owns the `Engine`\r\n      connection. This negatively impacts RAM and CPU usage.\r\n  - _B: Network traffic_<br>\r\n      WebSocket is designed around the premise that each message frame has to be \r\n      surrounded by the least amount of data. In HTTP 1.1 transports, each message\r\n      frame is surrounded by HTTP headers and chunked encoding frames. If you try to\r\n      send the message _\"Hello world\"_ with xhr-polling, the message ultimately\r\n      becomes larger than if you were to send it with WebSocket.\r\n  - _C: Lightweight parser_<br>\r\n      As an effect of **B**, the server has to do a lot more work to parse the network\r\n      data and figure out the message when traditional HTTP requests are used\r\n      (as in long polling). This means that another advantage of WebSocket is\r\n      less server CPU usage.\r\n\r\n2. **Better user experience**\r\n\r\n    Due to the reasons stated in point **1**, the most important effect of being able\r\n    to establish a WebSocket connection is raw data transfer speed, which translates\r\n    in _some_ cases in better user experience.\r\n\r\n    Applications with heavy realtime interaction (such as games) will benefit greatly,\r\n    whereas applications like realtime chat (Gmail/Facebook), newsfeeds (Facebook) or\r\n    timelines (Twitter) will have negligible user experience improvements.\r\n\r\nHaving said this, attempting to establish a WebSocket connection directly so far has\r\nproven problematic:\r\n\r\n1. **Proxies**<br>\r\n    Many corporate proxies block WebSocket traffic.\r\n\r\n2. **Personal firewall and antivirus software**<br>\r\n    As a result of our research, we've found that at least 3 personal security\r\n    applications block WebSocket traffic.\r\n\r\n3. **Cloud application platforms**<br>\r\n    Platforms like Heroku or No.de have had trouble keeping up with the fast-paced\r\n    nature of the evolution of the WebSocket protocol. Applications therefore end up\r\n    inevitably using long polling, but the seamless installation experience of \r\n    Socket.IO we strive for (_\"require() it and it just works\"_) disappears.\r\n\r\nSome of these problems have solutions. In the case of proxies and personal programs,\r\nhowever, the solutions many times involve upgrading software. Experience has shown\r\nthat relying on client software upgrades to deliver a business solution is\r\nfruitless: the very existence of this project has to do with a fragmented panorama\r\nof user agent distribution, with clients connecting with latest versions of the most\r\nmodern user agents (Chrome, Firefox and Safari), but others with versions as low as\r\nIE 5.5.\r\n\r\nFrom the user perspective, an unsuccessful WebSocket connection can translate in\r\nup to at least 10 seconds of waiting for the realtime application to begin\r\nexchanging data. This **perceptively** hurts user experience.\r\n\r\nTo summarize, **Engine** focuses on reliability and user experience first, marginal\r\npotential UX improvements and increased server performance second. `Engine` is the\r\nresult of all the lessons learned with WebSocket in the wild.\r\n\r\n## Architecture\r\n\r\nThe main premise of `Engine`, and the core of its existence, is the ability to\r\nswap transports on the fly. A connection starts as xhr-polling, but it can\r\nswitch to WebSocket.\r\n\r\nThe central problem this poses is: how do we switch transports without losing\r\nmessages?\r\n\r\n`Engine` only switches from polling to another transport in between polling\r\ncycles. Since the server closes the connection after a certain timeout when\r\nthere's no activity, and the polling transport implementation buffers messages\r\nin between connections, this ensures no message loss and optimal performance.\r\n\r\nAnother benefit of this design is that we workaround almost all the limitations\r\nof **Flash Socket**, such as slow connection times, increased file size (we can\r\nsafely lazy load it without hurting user experience), etc.\r\n\r\n## FAQ\r\n\r\n### Can I use engine without Socket.IO ?\r\n\r\nAbsolutely. Although the recommended framework for building realtime applications\r\nis Socket.IO, since it provides fundamental features for real-world applications \r\nsuch as multiplexing, reconnection support, etc.\r\n\r\n`Engine` is to Socket.IO what Connect is to Express. An essential piece for building\r\nrealtime frameworks, but something you _probably_ won't be using for building\r\nactual applications.\r\n\r\n### Does the server serve the client?\r\n\r\nNo. The main reason is that `Engine` is meant to be bundled with frameworks.\r\nSocket.IO includes `Engine`, therefore serving two clients is not necessary. If\r\nyou use Socket.IO, including\r\n\r\n```html\r\n<script src=\"/socket.io/socket.io.js\">\r\n```\r\n\r\nhas you covered.\r\n\r\n### Can I implement `Engine` in other languages?\r\n\r\nAbsolutely. The [engine.io-protocol](https://github.com/LearnBoost/engine.io-protocol)\r\nrepository contains the most up to date description of the specification\r\nat all times, and the parser implementation in JavaScript.\r\n\r\n## License \r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2014 Guillermo Rauch &lt;guillermo@learnboost.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Automattic/engine.io/issues"
  },
  "_id": "engine.io@1.5.2",
  "_shasum": "6863929af3194886087be542d6354dbde7b557bd",
  "_from": "automattic/engine.io#f3fd4bb",
  "_resolved": "git://github.com/automattic/engine.io.git#f3fd4bb7eb25f3061b1b61b5453d56c83e71feb0"
}
